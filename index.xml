<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://ysumgl.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Aug 2019 20:56:10 +0800</lastBuildDate>
    
	<atom:link href="https://ysumgl.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring 注解开发</title>
      <link>https://ysumgl.github.io/spring-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 12 Aug 2019 20:56:10 +0800</pubDate>
      
      <guid>https://ysumgl.github.io/spring-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</guid>
      <description>Spring 注解开发 1.@Bean注解和@Configration注解 在原来的Spring开发中，我们都是通过配置xml的方式，通过bean标签将对象放到IOC容器中，例如
&amp;lt;bean id = &amp;quot;person&amp;quot; class = &amp;quot;cn.jack.Person&amp;quot;&amp;gt; &amp;lt;property name = &amp;quot;name&amp;quot; value = &amp;quot;zhangsan&amp;quot;&amp;gt;&amp;lt;/property&amp;gt; &amp;lt;property name = &amp;quot;age&amp;quot; value = &amp;quot;20&amp;quot;&amp;gt;&amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt;  然后在测试类中获取IOC容器中对象的方法为：
@Test public void test1(){ ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&amp;quot;beans.xml&amp;quot;); Person person = (Person) applicationContext.getBean(&amp;quot;person&amp;quot;); System.out.println(person); }  如果通过Spring注解的方式，则不需要这些配置文件，需要建立一个配置类来顶替配置文件，在配置类上面标注@Configration注解，表明这个类是一个配置类。通过在类中定义相应返回值的方法，标注@Bean注解。Spring默认将方法名称作为id，方法返回值类型作为class，如果要自定义id的话，在@Bean注解value值设为相应的id。
@Configuration public class MainConfig { @Bean public Person person(){ return new Person(&amp;quot;lisi&amp;quot;,20); } @Bean(&amp;quot;person1&amp;quot;) public Person other(){ return new Person(&amp;quot;zhagnsan&amp;quot;,18); } }  通过定义配置类，将相应对象放到了IOC容器中，那么我们如何像xml方式那种获取对应的ApplicationContext呢？</description>
    </item>
    
    <item>
      <title>Hugo介绍</title>
      <link>https://ysumgl.github.io/hugo%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 11 May 2019 20:19:07 +0800</pubDate>
      
      <guid>https://ysumgl.github.io/hugo%E4%BB%8B%E7%BB%8D/</guid>
      <description> 建立hugo个人博客的步骤 1.在本机上搭建hugo  hugo new site myblog ：创建一个名为myblog的站点 git clone 、、、下载hugo主题 hugo new ..md 建立一个md文档，最后变成后来的html hugo server -t 主题名 &amp;ndash;buildDrafts 以相应主题启动hugo  2.推向GitHub，以公网访问  hugo &amp;ndash;theme=主题名 &amp;ndash;baseUrl=GitHub上建立的仓库名(要求为你的名称+.github.io，比如ysumgl.github.io)这回在本地生成一个public文件夹，即把写的文章弄成HTML版，例如hugo &amp;ndash;theme=m10c &amp;ndash;baseUrl=&amp;ldquo;https://ysumgl.github.io/&amp;quot; 进入public文件夹，  git init
 git add . git commit -m &amp;ldquo;一些描述&amp;rdquo; git remote add origin https://github.com/ysuMgl/ysumgl.github.io.git git push -u origin master   进行这几部操作，将项目推到GitHub上去，就可以通过公网访问了
3.写过文章后，在GitHub中更新  git add . git commit -m &amp;ldquo;一些描述&amp;rdquo; git pull git push origin master  </description>
    </item>
    
  </channel>
</rss>